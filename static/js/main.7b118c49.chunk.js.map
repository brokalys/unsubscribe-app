{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","success","setSuccess","error","setError","key","setKey","id","setId","all","setAll","a","axios","post","query","Boolean","useEffect","params","queryString","parse","window","location","search","className","onClick","type","onChange","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUAsEeA,MAjEf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEaF,oBAAS,GAFtB,mBAENG,EAFM,KAECC,EAFD,OAGSJ,qBAHT,mBAGNK,EAHM,KAGDC,EAHC,OAION,qBAJP,mBAINO,EAJM,KAIFC,EAJE,OAKSR,oBAAS,GALlB,mBAKNS,EALM,KAKDC,EALC,iDAcb,sBAAAC,EAAA,+EAEUC,IAAMC,KAAK,4BAA6B,CAC5CC,MAAM,6EAAD,OAGOP,EAHP,8CAIqBF,EAJrB,kCAKQU,QAAQN,GALhB,6CAHX,OAcIP,GAAW,GAdf,+CAgBIE,GAAS,GAhBb,yDAda,sBAsCb,OA/BAY,qBAAU,WACR,IAAMC,EAASC,IAAYC,MAAMC,OAAOC,SAASC,QAEjDhB,EAAOW,EAAOZ,KACdG,EAAMS,EAAOV,MACZ,IA0BEF,GAAQE,EAMTN,EAEA,uBAAGsB,UAAU,oBAAb,6BAIApB,EAEA,uBAAGoB,UAAU,kBAAb,iDAKF,6BACE,oEACA,4BAAQC,QA3DC,4CA2DT,4CACA,+BAAO,2BAAOC,KAAK,WAAWC,SA1BlC,WACEhB,GAAQD,MAyBN,wDApBA,uBAAGc,UAAU,kBAAb,8BCjCcR,QACW,cAA7BK,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7b118c49.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport queryString from 'query-string';\nimport './App.css';\n\nfunction App() {\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  const [key, setKey] = useState();\n  const [id, setId] = useState();\n  const [all, setAll] = useState(false);\n\n  useEffect(() => {\n    const params = queryString.parse(window.location.search);\n\n    setKey(params.key);\n    setId(params.id);\n  }, []);\n\n  async function unsubscribe() {\n    try {\n      await axios.post('https://api.brokalys.com/', {\n        query: `\n          mutation {\n            unsubscribePinger(\n              id: ${id},\n              unsubscribe_key: \"${key}\",\n              all: ${Boolean(all)},\n            )\n          }\n        `\n      });\n\n      setSuccess(true);\n    } catch (e) {\n      setError(true);\n    }\n  }\n\n  function toggleAllState() {\n    setAll(!all);\n  }\n\n  if (!key || !id) {\n    return (\n      <p className=\"feedback-error\">Invalid unsubscribe link.</p>\n    );\n  }\n\n  if (success) {\n    return (\n      <p className=\"feedback-success\">Unsubscribed succesfully.</p>\n    );\n  }\n\n  if (error) {\n    return (\n      <p className=\"feedback-error\">Failed unsubscribing. Please try again later.</p>\n    );\n  }\n\n  return (\n    <div>\n      <p>Are You sure You want to unsubscribe?</p>\n      <button onClick={unsubscribe}>Yes, don't send me PINGER emails anymore</button>\n      <label><input type=\"checkbox\" onChange={toggleAllState} />Unsubscribe from ALL pingers fro this email address</label>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}